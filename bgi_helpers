#!/bin/bash
#===============================================================================
#          FILE: bgi_helpers
#   DESCRIPTION: Provides some helper functions to be sourced in other scripts
#        AUTHOR: Bernd Giegerich (bgi), Bernd.A.Giegerich@gmail.com
#-------------------------------------------------------------------------------
# 2015-04-17  bgi  1.0.0  Initial version
#-------------------------------------------------------------------------------
bgi_helpers_needed_externals='' # when adding a function, you should add
                                # the externals needed by this function close
                                # to the function button by doing a
                                # bgi_helpers_needed_externals+=('external')

#---[FUNCTION]------------------------------------------------------------------
# Checks external commands for availability
#
# Globals:
#   none
# Arguments:
#   $@ - list of externals to check for
# Returns:
#   rc 0 - all specified externals are available
#   rc 1 - externals are missing
#   STDOUT - list of missing externals (if any)
# Example:
#   needed_externals='basename dirname rsync'
#   if ! missing_externals=$(bgi_check_for_externals ${needed_externals}); then
#       >&2 echo "Needed externals not found: ${missing_externals}"
#       exit ${rc_err_missing_dependencies}
#   fi
#-------------------------------------------------------------------------------
bgi_check_for_externals ()
{
    local missing

    for needed_command in "$@"; do
        hash "$needed_command" >/dev/null 2>&1 || missing+=($needed_command)
    done

    if [[ ${#missing[@]} -gt 0 ]]; then
        echo "${missing[@]}"
        return 1
    else
        return 0
    fi
}

#---[FUNCTION]------------------------------------------------------------------
# Returns the (written) name of the day
#
# Globals:
#   none
# Arguments:
#   $1 - Day number (1..7, 1 == Monday)
# Returns:
#   STDOUT - Name of the day
# Example:
#   day_weekly=1
#   day_weekly_name=$(name_of_weekday "${day_weekly}")
#-------------------------------------------------------------------------------
name_of_weekday ()
{
    declare -i day_number="$1"
    local weekdays=(NO_ZERO
        Monday Tuesday  Wednesday Thursday Friday Saturday Sunday )
    echo ${weekdays[$day_number]}
}

#---[FUNCTION]------------------------------------------------------------------
# Returns the absolute path for a given file or directory
# The file or directory must already exist.
#
# Globals:
#   none
# Arguments:
#   $1 - file/directory to find the absolute path for
# Returns:
#   rc   0 - absolute path found
#   rc 127 - file/directory does not exist
#   STDOUT - absolute path of the file/directory
# Example:
#   absolute_path=$(abs_path "${path_raw}") || absolute_path=''
#-------------------------------------------------------------------------------
function abs_path ()
{
    local directory="$1"
    if [[ -d "${directory}" ]]; then
        pushd "${directory}" >/dev/null
        pwd
        popd >/dev/null
    elif [[ -e "${directory}" ]]; then
        pushd "$(dirname "${directory}")" >/dev/null
        echo "$(pwd)/$(basename "${directory}")"
        popd >/dev/null
    else
        return 127
    fi
}
bgi_helpers_needed_externals+=("dirname basename")

#---[FUNCTION]------------------------------------------------------------------
# Removes trailing slashes (if any) from a string
#
# Globals:
#   none
# Arguments:
#   $1 - String to process
# Returns:
#   STDOUT - string with trailing slashes removed
# Example:
#   src_dir=$(clean_dirname "$1")
#-------------------------------------------------------------------------------
clean_dirname ()
{
    echo ${1%%+(/)}
}

#---[FUNCTION]------------------------------------------------------------------
# logs per logger (if available), by printing to STDERR otherwise.
# (If logger is used, a copy of the message is also printed to STDERR)
#
# Globals:
#   log_tag - tag to add to the log entry
#   log_facility - log facility to use (defaults to 'local7')
# Arguments:
#   $1 - log priority (e.g. 'err', 'notice', 'info', 'debug')1111
#   $* - string(s) to log
# Returns:
#   nothing (creates log entries in syslog and on STDERR)
# Example:
#   see below, functions log_{e|n|i|d}
#-------------------------------------------------------------------------------
function my_logger ()
{
    local log_prio=$1
    shift
    if hash 'logger'; then
        logger --stderr --tag "$log_tag" --priority "${log_facility:=local7}.${log_prio}" "$*"
    else
        printf '[%s] %s - %s: %s\n' "$(date +'%Y-%m-%d %H:%M:%S')" "$log_tag" "$log_prio" "$*" >&2
    fi
}

#---[FUNCTION]------------------------------------------------------------------
# Four functions using the my_logger function above to log on err, notice,
# info or debug level if log_verbosity meets their verbosity level.
#
# Globals:
#   log_tag - tag to add to the log entry
#   log_facility - log facility to use (defaults to 'local7')
#   log_verbosity - controls, if log entries of a specific severity are created
# Arguments:
#   $@ - string(s) to log
# Returns:
#   nothing (creates log entries in syslog and on STDERR)
# Example:
#   log_e "Didn't work"
#   log_n "Start processing"
#   log_d "var1 is set to ${var1}"
#-------------------------------------------------------------------------------
log_e () {                                 my_logger "err"    "$@" ; }
log_n () { [[ ${log_verbosity} -ge 1 ]] && my_logger "notice" "$@" ; }
log_i () { [[ ${log_verbosity} -ge 2 ]] && my_logger "info"   "$@" ; }
log_d () { [[ ${log_verbosity} -ge 3 ]] && my_logger "debug"  "$@" ; }

#---[FUNCTION]------------------------------------------------------------------
# Safe removal of a directory, avoiding some typical quirks
#
# Globals:
#   none
# Arguments:
#   $1 - file or directory to remove
# Returns:
#   rc 0   - file/directory removed
#   rc > 0 - error removing file/dir, rc is the rc of rm
# Example:
#   if ! bgi_safe_remove_dir "${dir_to_remove}"; then
#       log_e "Error removing [${dir_to_remove}], rm returned rc [$?]"
#   fi
#-------------------------------------------------------------------------------
bgi_safe_remove_dir ()
{
    local dir_to_remove="$1"
    if ! rm -rf -- "$(dirname ${dir_to_remove})/$(basename ${dir_to_remove})"; then
        return $?
    else
        return 0
    fi
}
bgi_helpers_needed_externals+=("rm")

#---[FUNCTION]------------------------------------------------------------------
# Safe removal of a file, avoiding some typical quirks
#
# Globals:
#   none
# Arguments:
#   $1 - file to remove
# Returns:
#   rc 0   - file/directory removed
#   rc > 0 - error removing file/dir, rc is the rc of rm
# Example:
#   if ! bgi_safe_remove_file "${file_to_remove}"; then
#       log_e "Error removing [${file_to_remove}], rm returned rc [$?]"
#   fi
#-------------------------------------------------------------------------------
bgi_safe_remove_file ()
{
    local file_to_remove="$1"
    if ! rm -f -- "$(dirname ${file_to_remove})/$(basename ${file_to_remove})"; then
        return $?
    else
        return 0
    fi
}
bgi_helpers_needed_externals+=("rm")


#===============================================================================
# check for our own externals
bgi_helpers_missing=$(bgi_check_for_externals ${bgi_helpers_needed_externals})
if [[ $? -gt 0 ]]; then
    >&2 echo "bgi_helpers: can't load, missing [${bgi_helpers_missing}]" 
    exit 1
fi

# vim: filetype=sh
